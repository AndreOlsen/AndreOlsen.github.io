--- 
import Footer from '@components/Footer.astro';
import { ViewTransitions } from 'astro:transitions';
import '@styles/global.scss';

interface Props {
	title: string;
	description: string
}

const { title, description } = Astro.props;
---

<!DOCTYPE html> 
<html lang="da">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
		<link rel="manifest" href="/site.webmanifest">
		<meta name="generator" content={Astro.generator} />
		<meta name="description" content={description} />
		<title>{title}</title>
		<ViewTransitions />
	</head>
	<body class="bg-grey-blue text-cyan-green">
		<div class="cursor" transition:persist></div>

		<slot />
	</body>
</html>

<style is:global lang="scss">
	:root {
		--bouncy-cubic: cubic-bezier(.48, -.38, .41, 1.22);
	}

	* {
		box-sizing: border-box;
		cursor: none;
	}

	html {
		scroll-behavior: smooth;
	}

	.cursor {
		--cursor-y: 0;
		--cursor-x: 0;
		background-color: #66FCF1;
		opacity: 0;
		width: 20px;
		height: 20px;
		border-radius: 100%;
		pointer-events: none;
		user-select: none;
		position: fixed;
		top: var(--cursor-y);
		left: var(--cursor-x);
		z-index: 999;
		will-change: transform, top, left;
		transition: transform .4s cubic-bezier(.23,1,.32,1);

		&.hover {
			transform: scale(3.5);
			background-color: #FFCB9A;
			mix-blend-mode: difference;
		}

		&.active {
			opacity: 1;
		}
	}
</style>

<script>
	(function() {
		if (!window.matchMedia("(pointer: coarse)").matches) {
			let cursor: HTMLElement = document.querySelector('.cursor') as HTMLElement;
			const DEBUG = false;

			/**
			 * Update the position of the custom cursor.
			 * @param e 
			 */
			const updatePosition = (e: MouseEvent) => {
				const x = e.clientX - 10;
				const y = e.clientY - 10;
				
				DEBUG && console.log('Updating cursor position');
				DEBUG && console.log('X: ' + x + ' / ' + 'Y: ' + y);

				cursor.style.setProperty('--cursor-y', `${y}px`);
				cursor.style.setProperty('--cursor-x', `${x}px`);
				cursor.classList.add('active');
			}

			/**
			 * Toggle hover state of the cursor.
			 * @param isHover 
			 */
			const toggleHoverState = (isHover: boolean) => {
				DEBUG && console.log('Setting Hover State: ' + isHover);

				cursor.classList.toggle('hover', isHover);
			};

			/**
			 * Enable custom hover states on defined hoverables.
			 */
			const setHoverables = () => {
				const hoverables = document.querySelectorAll('a');

				DEBUG && console.log('Setting hoverable events: ' + hoverables);

				hoverables.forEach((hoverable) => {
					hoverable.addEventListener('mouseover', () => toggleHoverState(true));
					hoverable.addEventListener('mouseleave', () => toggleHoverState(false));
				});
			};

			// Event delegation for hover state
			/* document.addEventListener('mouseover', (e: MouseEvent) => {
				if (e.target instanceof Element && e.target.matches('a')) {
					toggleHoverState(true);
				}
			});

			document.addEventListener('mouseleave', (e: MouseEvent) => {
				if (e.target instanceof Element && e.target.matches('a')) {
					toggleHoverState(false);
				}
			}); */

			document.documentElement.addEventListener('mousemove', updatePosition);
			document.documentElement.addEventListener("mouseenter", updatePosition);
			document.documentElement.addEventListener("mouseleave", () => cursor.classList.remove('active'));

			setHoverables();

			const reinitializeCursor = () => {
				toggleHoverState(false); // Prevent sticky hover effect on cursor.
				setHoverables(); // Reattach listeners to new elements after page load.
				cursor = document.querySelector('.cursor') as HTMLElement // Re-set cursor element.
			};

			document.addEventListener("astro:page-load", reinitializeCursor);
		}
	})();
</script>