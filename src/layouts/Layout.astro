--- 
import CommonHead from '@components/CommonHead.astro';
import Footer from '@components/Footer.astro';
import { ViewTransitions } from 'astro:transitions';
import '@styles/global.scss';

interface Props {
	title: string;
	description: string
}

const { title, description } = Astro.props;
---

<!DOCTYPE html> 
<html lang="da">
	<head>
		<CommonHead />
		<meta name="generator" content={Astro.generator} />
		<meta name="description" content={description} />
		<title>{title}</title>
		<ViewTransitions />
	</head>
	<body class="bg-grey-blue text-cyan-green">
		<div class="min-h-screen flex flex-col justify-center items-center p-[5%]">
			<slot />

			<Footer />

		</div>
		<div class="cursor"></div>
		
	</body>
</html>

<style is:global lang="scss">
	:root {
		--fontsource-display: swap;
		--bouncy-cubic: cubic-bezier(.48, -.38, .41, 1.22);
	}

	html {
		scroll-behavior: smooth;
	}

	* {
		box-sizing: border-box;
		cursor: none;
	}

	.cursor {
		background-color: #fff;
		opacity: 0;
		width: 15px;
		height: 15px;
		border-radius: 100%;
		pointer-events: none;
		position: fixed;
		top: 0;
		left: 0;
		transition: transform 100;

		&.hover {
			transform: scale(2.5);
			background-color: #FFCB9A;
			mix-blend-mode: difference;
		}
	}
</style>

<script>
	const cursor: HTMLElement = document.querySelector('.cursor') as HTMLElement;
	const anchors: NodeListOf<HTMLAnchorElement> = document.querySelectorAll('a');

	document.addEventListener('mousemove', (e: MouseEvent) => {
		const mouseX = e.clientX;
		const mouseY = e.clientY;

		cursor.style.transform = `translate(${mouseX}px, ${mouseY}px)`;
		cursor.style.opacity = '1';
	});

	anchors.forEach((anchor: HTMLAnchorElement) => {
		anchor.addEventListener('mouseover', () => cursor.classList.add('hover'));
		anchor.addEventListener('mouseleave', () => cursor.classList.remove('hover'));
	});
</script>